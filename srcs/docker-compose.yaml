services:
  ### GITLAB ###
  gitlab:
    container_name: gitlab
    restart: always
    ports:
      - "8080:80"
      - "4433:443"
      - "4242:22"
    volumes:
      - gitlab_data:/var/opt/gitlab
      - gitlab_logs:/var/log/gitlab
      - gitlab_config:/etc/gitlab
    image: my_gitlab:0.1.0
    build:
      context: ./requirements/GitLab
      dockerfile: Dockerfile
    env_file:
      - ./requirements/GitLab/.env
    networks:
      - shared_network

  ### JENKINS DOCKER-IN-DOCKER ###
  jenkins-docker:
    container_name: jenkins-docker
    image: docker:dind
    restart: always
    privileged: true
    environment:
      - DOCKER_TLS_CERTDIR=/certs
    volumes:
      - jenkins-docker-certs:/certs/client
      - jenkins_home:/var/jenkins_home
    ports:
      - "2376:2376"
    command: --storage-driver overlay2
    networks:
      shared_network:
        aliases:
          - docker

  ### JENKINS ###
  jenkins:
    container_name: jenkins
    restart: on-failure
    depends_on:
      - jenkins-docker
    ports:
      - "8081:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - jenkins-docker-certs:/certs/client:ro
    image: my_jenkins:0.1.0
    build:
      context: ./requirements/Jenkins
      dockerfile: Dockerfile
    environment:
      - DOCKER_HOST=tcp://docker:2376
      - DOCKER_CERT_PATH=/certs/client
      - DOCKER_TLS_VERIFY=1
    env_file:
      - ./requirements/Jenkins/.env
    networks:
      - shared_network

  ### NEXUS ###
  nexus:
    container_name: nexus
    restart: always
    ports:
      - "8082:8081"
    volumes:
      - nexus_data:/nexus-data
    image: my_nexus:0.1.0
    build:
      context: ./requirements/Nexus
      dockerfile: Dockerfile
    env_file:
      - ./requirements/Nexus/.env
    networks:
      - shared_network

  ### PROMETHEUS ###
  prometheus:
    container_name: prometheus
    build:
      context: ./requirements/Prometheus
      dockerfile: Dockerfile
    image: my_prometheus:0.1.0
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
    env_file:
      - ./requirements/Prometheus/.env
    networks:
      - shared_network

  ### PROMETHEUS PUSHGATEWAY ###
  pushgateway:
    container_name: pushgateway
    image: prom/pushgateway:v1.4.3
    restart: always
    ports:
      - "9091:9091"
    networks:
      - shared_network

  ### ALERTMANAGER ###
  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager:v0.23.0
    restart: always
    ports:
      - "9093:9093"
    volumes:
      - ./requirements/Alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    networks:
      - shared_network

  ### GRAFANA ###
  grafana:
    container_name: grafana
    build:
      context: ./requirements/Grafana
      dockerfile: Dockerfile
    image: my_grafana:0.1.0
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./requirements/Grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./requirements/Grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./requirements/Grafana/provisioning/dashboards/json:/etc/grafana/provisioning/dashboards/json
    env_file:
      - ./requirements/Grafana/.env
    networks:
      - shared_network

  ### CADVISOR ###
  cadvisor:
    container_name: cadvisor
    image: cadvisor:inception
    build:
      context: ./requirements/Cadvisor
      dockerfile: Dockerfile
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
    networks:
      - shared_network
    restart: on-failure
    privileged: true
    devices: 
      - "/dev/kmsg:/dev/kmsg:rw"
    group_add:
      - docker
    security_opt:
      - apparmor:unconfined
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/cadvisor/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  ### SONARQUBE ###
  sonarqube:
    container_name: sonarqube
    image: sonarqube:9.9-community
    restart: on-failure
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    env_file:
      - ./requirements/SonarQube/.env
    depends_on:
      - postgres
    networks:
      - shared_network

  ### POSTGRESQL FOR SONARQUBE ###
  postgres:
    container_name: postgres
    image: postgres:13
    restart: on-failure
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./requirements/SonarQube/postgres.env
    networks:
      - shared_network

networks:
  shared_network:
    driver: bridge

volumes:
  gitlab_data:
  gitlab_logs:
  gitlab_config:
  jenkins_home:
  jenkins-docker-certs:
  nexus_data:
  prometheus_data:
  alertmanager_data:
  grafana_data:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:
  postgres_data: