pipeline {
    /* Use the custom Docker agent from agent folder */
    agent {
        dockerfile {
            filename 'agent/Dockerfile'
            dir '.'
            args '--network=host'
        }
    }

    options {
        gitLabConnection('gitlab-local')
        timeout(time: 90, unit: 'SECONDS')
    }

    parameters {
        // Core execution controls - these will only be used for manual builds
        // booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'Run the test stage')
        // booleanParam(name: 'RUN_RUFF_CHECK', defaultValue: false, description: 'Run the Ruff code quality check')
        // booleanParam(name: 'RUN_BANDIT_CHECK', defaultValue: false, description: 'Run the Bandit security check')
        // booleanParam(name: 'UPDATE_VERSION', defaultValue: false, description: 'Update version information')
        // booleanParam(name: 'BUILD_EXECUTABLE', defaultValue: false, description: 'Build the executable')
        // booleanParam(name: 'ARCHIVE_EXECUTABLE', defaultValue: false, description: 'Archive the executable')
        // booleanParam(name: 'UPLOAD_TO_NEXUS', defaultValue: false, description: 'Upload artifacts to Nexus')
        // booleanParam(name: 'PUSH_GIT_CHANGES', defaultValue: false, description: 'Push changes and create tag')
        // booleanParam(name: 'CREATE_MERGE_REQUEST', defaultValue: false, description: 'Create a merge request to main branch')
        
        // Integration controls
        booleanParam(name: 'ENABLE_GITLAB_STATUS', defaultValue: false, description: 'Update GitLab commit status')
        booleanParam(name: 'ENABLE_TELEGRAM', defaultValue: false, description: 'Send Telegram notifications')

        // metrics
        booleanParam(name: 'ENABLE_METRICS', defaultValue: false, description: 'Enable Prometheus metrics')

        booleanParam(
            name: 'AUTO_MERGE_TO_MAIN',
            defaultValue: true,
            description: 'Automatically merge changes to main branch if all checks pass'
        )
    }

    environment {
        // Nexus configuration
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "nexus:8081"
        NEXUS_REPO = "my-artifacts"
        NEXUS_CREDENTIALS_ID = "bb41509b-d0cc-4f65-94a4-755c22441930"
        GROUP_ID = "WmcA"
        ARTIFACT_ID = "appflask"
        
        // Git configuration for pushing changes
        GITLAB_CREDENTIALS_ID = "gitlab-credentials"
        GITLAB_EMAIL = credentials('gitlab-email-crea')

        // SonarQube configuration
        SONAR_CREDENTIALS_ID = "sonarqube_token"
        
        // Timestamp to use throughout the pipeline - in format yearmonthday hour minutes seconds
        TIMESTAMP = sh(script: 'date +%Y%m%d%H%M%S', returnStdout: true).trim()
    }

    stages {

        // First clean the workspace, then check out code ONCE
        stage('Checkout & Cleanup') {
            steps {
                // Then check out the code
                checkout scm
                
                // Skip build if commit has [ci skip]
                scmSkip(deleteBuild: true, skipPattern:'.*\\[ci skip\\].*')
            }
        }

        stage('Load Utilities') {
            steps {
                script {
                    // Load utility functions from the jenkinsfile-includes directory
                    utils = load "jenkinsfile-includes/cicdUtils.groovy"
                }
            }
        }
        

        stage('Load Configuration') {
            steps {
                script {
                    echo "Loading configuration from jenkins-config.yml if available..."
                    
                    // Initialize global variables for stage control
                    // env.DO_RUN_TESTS = params.RUN_TESTS.toString()
                    // env.DO_RUN_RUFF_CHECK = params.RUN_RUFF_CHECK.toString()
                    // env.DO_RUN_BANDIT_CHECK = params.RUN_BANDIT_CHECK.toString()
                    // env.DO_UPDATE_VERSION = params.UPDATE_VERSION.toString()
                    // env.DO_BUILD_EXECUTABLE = params.BUILD_EXECUTABLE.toString()
                    // env.DO_ARCHIVE_EXECUTABLE = params.ARCHIVE_EXECUTABLE.toString()
                    // env.DO_UPLOAD_TO_NEXUS = params.UPLOAD_TO_NEXUS.toString()
                    // env.DO_PUSH_GIT_CHANGES = params.PUSH_GIT_CHANGES.toString()
                    // env.DO_CREATE_MERGE_REQUEST = params.CREATE_MERGE_REQUEST.toString()
                    env.DO_ENABLE_GITLAB_STATUS = params.ENABLE_GITLAB_STATUS.toString()
                    env.DO_ENABLE_TELEGRAM = params.ENABLE_TELEGRAM.toString()
                    env.DO_ENABLE_METRICS = params.ENABLE_METRICS.toString()
                    
                    // Try to load the configuration file
                    try {
                        if (fileExists('jenkins-config.yml')) {
                            echo "Found jenkins-config.yml file, loading configuration..."
                            def config = readYaml(file: 'jenkins-config.yml')
                            echo "Config loaded: ${config}"
                            
                            // Override global variables with values from config file
                            if (config.runTests != null) env.DO_RUN_TESTS = config.runTests.toString()
                            if (config.runRuffCheck != null) env.DO_RUN_RUFF_CHECK = config.runRuffCheck.toString()
                            if (config.runBanditCheck != null) env.DO_RUN_BANDIT_CHECK = config.runBanditCheck.toString()
                            if (config.updateVersion != null) env.DO_UPDATE_VERSION = config.updateVersion.toString()
                            if (config.buildExecutable != null) env.DO_BUILD_EXECUTABLE = config.buildExecutable.toString()
                            if (config.archiveExecutable != null) env.DO_ARCHIVE_EXECUTABLE = config.archiveExecutable.toString()
                            if (config.uploadToNexus != null) env.DO_UPLOAD_TO_NEXUS = config.uploadToNexus.toString()
                            if (config.pushGitChanges != null) env.DO_PUSH_GIT_CHANGES = config.pushGitChanges.toString()
                            if (config.createMergeRequest != null) env.DO_CREATE_MERGE_REQUEST = config.createMergeRequest.toString()
                            if (config.enableGitlabStatus != null) env.DO_ENABLE_GITLAB_STATUS = config.enableGitlabStatus.toString()
                            if (config.enableTelegram != null) env.DO_ENABLE_TELEGRAM = config.enableTelegram.toString()
                            if (config.enableMetrics != null) env.DO_ENABLE_METRICS = config.enableMetrics.toString()
                            
                            echo "Configuration values set from config file"
                        } else {
                            echo "No jenkins-config.yml file found, using parameter values"
                        }
                    } catch (Exception e) {
                        echo "Error loading config file: ${e.getMessage()}"
                        echo "Using parameter values instead"
                    }
                }
            }
        }
        
        stage('Pipeline Start') {
            steps {
                script {
                    // Update GitLab status if enabled
                    utils.updateGitLabStatus('pipeline', 'running')
                    
                    // Send notification
                    utils.notify("🚀 Pipeline started for ${env.JOB_NAME} #${env.BUILD_NUMBER} at ${TIMESTAMP}")
                    
                    // Print selected stages for clarity
                    // echo "Running with the following configuration:"
                    // echo "Tests: ${DO_RUN_TESTS}"
                    // echo "Ruff Check: ${DO_RUN_RUFF_CHECK}"
                    // echo "Bandit Check: ${DO_RUN_BANDIT_CHECK}"
                    // echo "Update Version: ${DO_UPDATE_VERSION}"
                    // echo "Build Executable: ${DO_BUILD_EXECUTABLE}"
                    // echo "Archive Executable: ${DO_ARCHIVE_EXECUTABLE}"
                    // echo "Upload to Nexus: ${DO_UPLOAD_TO_NEXUS}"
                    // echo "Push Git Changes: ${DO_PUSH_GIT_CHANGES}"
                    // echo "Create Merge Request: ${DO_CREATE_MERGE_REQUEST}"
                    echo "GitLab Status Updates: ${DO_ENABLE_GITLAB_STATUS}"
                    echo "Telegram Notifications: ${DO_ENABLE_TELEGRAM}"
                    echo "Prometheus Metrics: ${DO_ENABLE_METRICS}"

                    // initialize Prometheus metrics if enabled
                    utils.initMetrics()
                }
            }
        }

        stage('Tests & Reports Generation') {
            steps {
                script {
                    utils.runStage('tests', 'Running tests with coverage... 🧪') {
                        sh '''
                        . /app/venv/bin/activate
                        python -m pytest tests/ --cov=appflask --cov-report=xml --junitxml=test-results.xml -v
                        '''
                    }
                }
            }
        }

        stage('SonarQube Upload') {
            steps {
                script {
                    utils.runStage('sonar-upload', 'Uploading to SonarQube... 👹') {
                        // Generate security report for SonarQube
                        sh '''
                        . /app/venv/bin/activate
                        python -m bandit -r appflask -f json -o bandit-report.json || true
                        '''
                        
                        // Upload to SonarQube but don't wait for quality gate yet
                        withSonarQubeEnv(credentialsId: env.SONAR_CREDENTIALS_ID, installationName: 'SonarQube') {
                            sh '''
                            . /app/venv/bin/activate
                            pysonar-scanner
                            '''
                        }
                    }
                }
            }
        }

        stage('Parallel Tasks') {
            parallel {
                stage('Code Quality') {
                    steps {
                        script {
                            utils.runStage('ruff-check', 'Running Ruff code quality check... 🔍') {
                                sh '''
                                . /app/venv/bin/activate
                                python -m ruff check appflask --select ALL --ignore N999 --exclude "tests/*"
                                '''
                            }
                        }
                    }
                }
                
                stage('Security Check') {
                    steps {
                        script {
                            utils.runStage('bandit', 'Running Bandit security check... 🔒') {
                                sh '''
                                . /app/venv/bin/activate
                                python -m bandit -r appflask -ll -iii
                                '''
                            }
                        }
                    }
                }
                
                stage('SonarQube Quality Gate') {
                    steps {
                        script {
                            utils.runStage('sonar-quality-gate', 'Waiting for SonarQube Quality Gate... 🎱') {
                                // Wait for the Quality Gate to complete
                                timeout(time: 5, unit: 'MINUTES') {
                                    waitForQualityGate abortPipeline: true
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Update Version Information') {
            steps {
                script {
                    utils.runStage('version-update', 'Updating version information... 📝') {
                        // Update version.py with the timestamp
                        sh "sed -i \"s/\\\${PLACEHOLDER_VERSION}/${env.TIMESTAMP}/g\" appflask/version.py"
                        
                        // Verify version.py was updated correctly
                        sh "cat appflask/version.py"
                        
                        // Also update version.info file to keep it in sync
                        sh "echo ${env.TIMESTAMP} > version.info"
                    }
                }
            }
        }

        stage('Build Executable') {
            steps {
                script {
                    utils.runStage('build', 'Building executable using PyInstaller... 🔧') {

                        // Inject ARTIFACT_ID into the spec file
                        sh "sed -i \"s/\\\${PLACEHOLDER_ARTIFACT_ID}/${env.ARTIFACT_ID}/g\" appflask.spec"

                        // Run PyInstaller directly using the binary instead of the module
                        sh """
                            . /app/venv/bin/activate
                            
                            # Run PyInstaller with optimized settings
                            /app/venv/bin/pyinstaller appflask.spec
                            
                            # Verify the binary exists
                            ls -la dist/
                        """
                    }
                }
            }
        }

        stage('Archive Executable') {
            steps {
                script {
                    utils.runStage('archive', 'Archiving the built executable... 📦') {
                        archiveArtifacts artifacts: "dist/${ARTIFACT_ID}", fingerprint: true
                    }
                }
            }
        }

        stage('Upload to Nexus') {
            steps {
                script {
                    utils.runStage('nexus-upload', 'Uploading artifacts to Nexus... 🚀') {
                        // Upload with "latest" tag
                        nexusArtifactUploader(
                            nexusVersion: env.NEXUS_VERSION,
                            protocol: env.NEXUS_PROTOCOL,
                            nexusUrl: env.NEXUS_URL,
                            groupId: env.GROUP_ID,
                            version: 'latest',
                            repository: env.NEXUS_REPO,
                            credentialsId: env.NEXUS_CREDENTIALS_ID,
                            artifacts: [
                                [
                                    artifactId: env.ARTIFACT_ID,
                                    type: 'bin',
                                    file: "dist/${ARTIFACT_ID}",
                                    classifier: ''
                                ]
                            ]
                        )
                        
                        // Upload with timestamp tag
                        nexusArtifactUploader(
                            nexusVersion: env.NEXUS_VERSION,
                            protocol: env.NEXUS_PROTOCOL,
                            nexusUrl: env.NEXUS_URL,
                            groupId: env.GROUP_ID,
                            version: env.TIMESTAMP,
                            repository: env.NEXUS_REPO,
                            credentialsId: env.NEXUS_CREDENTIALS_ID,
                            artifacts: [
                                [
                                    artifactId: env.ARTIFACT_ID,
                                    type: 'bin',
                                    file: "dist/${ARTIFACT_ID}",
                                    classifier: ''
                                ]
                            ]
                        )
                    }
                }
            }
        }

        stage('Push Changes & Create Tag') {
            steps {
                script {
                    utils.runStage('git-push', 'Updating repositories and tagging release... 📤') {

                            withCredentials([
                                usernamePassword(credentialsId: env.GITLAB_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')
                            ]) {
                            // Set up Git configuration
                            sh '''
                                git config user.email "${GITLAB_EMAIL}"
                                git config user.name "${USERNAME}"
                            '''
                            
                            // Update version info and commit
                            utils.updateVersionInfo()
                            
                            // Create and push tag (after main branch is updated)
                            utils.createReleaseTag()
                            
                            // Notify about successful operations
                            utils.notify("Jenkins: Version ${env.TIMESTAMP} pushed to current branch ${env.GIT_BRANCH}. Tag created successfully.")
                        }
                    }
                }
            }
        }

        stage('Update Helm Branch') {
            // when {
            //     expression { return params.UPDATE_HELM_BRANCH }
            // }
            steps {
                script {
                    utils.runStage('helm-branch', 'Updating Helm charts branch for Flux... 🚢') {
                        try {
                            // Call the function with required parameters
                            def result = utils.updateHelmBranch(
                                "helm-charts",                             // helmBranch
                                env.TIMESTAMP,                             // version
                            )
                            
                            utils.notify("Jenkins: Updated Helm charts branch with version ${env.TIMESTAMP} 🚢")
                        } catch (Exception e) {
                            utils.notify("Jenkins: Failed to update Helm charts branch: ${e.message} ⚠️")
                            throw e
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                utils.updateGitLabStatus('pipeline', 'success')
                utils.notify("🎉 Pipeline succeeded for ${env.JOB_NAME} #${env.BUILD_NUMBER}! All stages completed successfully.")
                
                echo "Performing final cleanup..."
                
                // Clean workspace
                cleanWs()
            }
        }
        failure {
            script {
                utils.updateGitLabStatus('pipeline', 'failed')
                utils.notify("❌ Pipeline failed for ${env.JOB_NAME} #${env.BUILD_NUMBER}. Check Jenkins for details.")
                
                echo "Performing final cleanup..."
            
                // Clean workspace
                cleanWs()
            }
        }
        always {
            script {
                echo "Finalizing metrics collection..."
                utils.finalizeMetrics(currentBuild.result ?: 'SUCCESS')
            }
        }
    }
}
