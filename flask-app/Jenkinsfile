pipeline {

	/* use a custom Dockerfile to setup the agent */
    agent {
        dockerfile {
            filename 'agent/Dockerfile'
        }
    }

    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "nexus:8081"
        NEXUS_REPO = "my-artifacts"
        NEXUS_CREDENTIALS_ID = bb41509b-d0cc-4f65-94a4-755c22441930
        GROUP_ID = "WmcA"
        ARTIFACT_ID = "app"
        ARTIFACT_VERSION = "1.0.0"
        ARTIFACT_TYPE = "bin"
        ARTIFACT_PATH = "dist/app"

        TELEGRAM_BOT_TOKEN = credentials("telegram-token") // change to a credential secret
        TELEGRAM_CHAT_ID = credentials("telegram-chat-id") // change to a credential secret
    }

    stages {
        stage('Start') {
            steps {
                script {
                    def buildNumber = env.BUILD_NUMBER
                    def projectName = env.JOB_NAME
                    def timestamp = new Date().format("yyyy-MM-dd HH:mm:ss")
                    def fullMessage = "üöÄ New pipeline started at [${timestamp}] [Build #${buildNumber}] for [${projectName}] üöÄ"

                    sendTelegramMessage("$fullMessage")
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    try {
                        sendTelegramMessage("Jenkins: Running tests... üîÑ")
                        sh '''
                            . venv/bin/activate
                            pytest srcs/tests --maxfail=1 --disable-warnings -q
                        '''
                        sendTelegramMessage("Jenkins: Tests passed successfully ‚úÖ")
                    } catch (Exception e) {
						def errorLog = e.getMessage()
                        sendTelegramMessage("Jenkins: Tests failed ‚ùå\nError: ${errorLog}")
                        throw e  // Re-throw to fail the stage
                    }
                }
            }
        }

        stage('Bug Checking - Ruff') {
            steps {
                script {
                    try {
                        sendTelegramMessage("Jenkins: Running Ruff code quality check... üîç")
                        sh '''
                            . venv/bin/activate
                            ruff check . --select all
                        '''
                        sendTelegramMessage("Jenkins: Ruff check passed successfully ‚úÖ")
                    } catch (Exception e) {
                        def errorLog = e.getMessage()
                        sendTelegramMessage("Jenkins: Ruff check failed - code quality issues found ‚ùå\nError: ${errorLog}")
                        error "Ruff found code quality issues. Pipeline interrupted."
                    }
                }
            }
        }

        stage('Security Check - Bandit') {
            steps {
                script {
                    try {
                        sendTelegramMessage("Jenkins: Running Bandit security check... üîí")
                        sh '''
                            . venv/bin/activate
                            bandit -r . -ll -iii
                        '''
                        sendTelegramMessage("Jenkins: Bandit security check passed successfully ‚úÖ")
                    } catch (Exception e) {
                        def errorLog = e.getMessage()
                        sendTelegramMessage("Jenkins: Bandit security check failed - security issues found ‚ùå\nError: ${errorLog}")
                        error "Bandit found security issues with medium or high severity. Pipeline interrupted."
                    }
                }
            }
        }

        stage('Build Executable') {
            steps {
                script {
                    try {
                        sendTelegramMessage("Jenkins: Building executable using PyInstaller... üîÑ")
                        sh '''
                            . venv/bin/activate
                            pyinstaller --onefile srcs/main/app.py
                        '''
                        sendTelegramMessage("Jenkins: Executable built successfully ‚úÖ")
                    } catch (Exception e) {
						def errorLog = e.getMessage()
                        sendTelegramMessage("Jenkins: Failed to build executable ‚ùå\nError: ${errorLog}")
                        throw e  // Re-throw to fail the stage
                    }
                }
            }
        }

        stage('Archive Executable') {
            steps {
                script {
                    try {
                        sendTelegramMessage("Jenkins: Archiving the built executable... üîÑ")
                        archiveArtifacts artifacts: 'dist/app', fingerprint: true
                        sendTelegramMessage("Jenkins: Executable archived successfully ‚úÖ")
					} catch (Exception e) {
						def errorLog = e.getMessage()
						sendTelegramMessage("Jenkins: Failed to archive executable ‚ùå\nError: ${errorLog}")
						throw e  // re-throw to fail the stage
					}
                }
            }
        }

        stage('Upload to Nexus') {
            steps {
                script {
                    try {
                        sendTelegramMessage("Jenkins: Uploading to Nexus... üîÑ")
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: GROUP_ID,
                            version: ARTIFACT_VERSION,
                            repository: NEXUS_REPO,
                            credentialsId: NEXUS_CREDENTIALS_ID,
                            artifacts: [
                                [
                                    artifactId: ARTIFACT_ID,
                                    type: ARTIFACT_TYPE,
                                    file: ARTIFACT_PATH
                                ]
                            ]
                        )
                        sendTelegramMessage("Jenkins: Successfully uploaded to Nexus ‚úÖ")
                    } catch (Exception e) {
						def errorLog = e.getMessage()
                        sendTelegramMessage("Jenkins: Failed to upload to Nexus ‚ùå\nError: ${errorLog}")
                        throw e  // Re-throw to fail the stage
                    }
                }
            }
        }
		stage('End') {
            steps {
                script {
                    def buildNumber = env.BUILD_NUMBER
                    def projectName = env.JOB_NAME
                    def timestamp = new Date().format("yyyy-MM-dd HH:mm:ss")
                    def fullMessage = "üî• Pipeline completed at [${timestamp}] [Build #${buildNumber}] for [${projectName}] üî•"

                    sendTelegramMessage("$fullMessage")
                }
            }
        }
    }
}

def sendTelegramMessage(String message) {
    sh """
        curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage \\
        -d chat_id=${TELEGRAM_CHAT_ID} \\
        -d text="${message}"
    """
}
