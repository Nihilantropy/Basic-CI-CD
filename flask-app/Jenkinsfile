pipeline {
    /* Use the custom Docker agent from agent folder */
    agent {
        dockerfile {
            filename 'Dockerfile'
            dir 'agent'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        // Nexus configuration
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "nexus:8081"
        NEXUS_REPO = "my-artifacts"
        NEXUS_CREDENTIALS_ID = "bb41509b-d0cc-4f65-94a4-755c22441930"
        GROUP_ID = "WmcA"
        ARTIFACT_ID = "flask-app"
        
        // Git configuration for pushing changes
        GIT_CREDENTIALS_ID = credentials("gitlab-credentials")
        
        // Timestamp to use throughout the pipeline - in format yearmonthday hour minutes seconds
        TIMESTAMP = sh(script: 'date +%Y%m%d%H%M%S', returnStdout: true).trim()
        
        // The repository URL base (will be used with credentials)
        GIT_REPO_URL = "http://gitlab/pipeline-project-group/app-flask.git"
    }

    stages {
        stage('Pipeline Start') {
            steps {
                script {
                    updateGitlabCommitStatus name: 'pipeline', state: 'running'
                    sendTelegramMessage("üöÄ Pipeline started for ${env.JOB_NAME} #${env.BUILD_NUMBER} at ${TIMESTAMP}")
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                script {
                    updateGitlabCommitStatus name: 'tests', state: 'running'
                    try {
                        sendTelegramMessage("Jenkins: Running tests with pytest... üß™")
                        sh 'python -m pytest srcs/tests --maxfail=1 --disable-warnings -v'
                        updateGitlabCommitStatus name: 'tests', state: 'success'
                        sendTelegramMessage("Jenkins: Tests passed successfully ‚úÖ")
                    } catch (Exception e) {
                        updateGitlabCommitStatus name: 'tests', state: 'failed'
                        def errorLog = e.getMessage()
                        sendTelegramMessage("Jenkins: Tests failed ‚ùå\nError: ${errorLog}")
                        error "Pytest tests failed. Pipeline interrupted."
                    }
                }
            }
        }

        stage('Code Quality Check - Ruff') {
            steps {
                script {
                    updateGitlabCommitStatus name: 'ruff-check', state: 'running'
                    try {
                        sendTelegramMessage("Jenkins: Running Ruff code quality check... üîç")
                        sh 'python -m ruff check . --select all'
                        updateGitlabCommitStatus name: 'ruff-check', state: 'success'
                        sendTelegramMessage("Jenkins: Ruff check passed successfully ‚úÖ")
                    } catch (Exception e) {
                        updateGitlabCommitStatus name: 'ruff-check', state: 'failed'
                        def errorLog = e.getMessage()
                        sendTelegramMessage("Jenkins: Ruff check failed - code quality issues found ‚ùå\nError: ${errorLog}")
                        error "Ruff found code quality issues. Pipeline interrupted."
                    }
                }
            }
        }

        stage('Security Check - Bandit') {
            steps {
                script {
                    updateGitlabCommitStatus name: 'bandit', state: 'running'
                    try {
                        sendTelegramMessage("Jenkins: Running Bandit security check... üîí")
                        sh 'python -m bandit -r . -ll -iii'
                        updateGitlabCommitStatus name: 'bandit', state: 'success'
                        sendTelegramMessage("Jenkins: Bandit security check passed successfully ‚úÖ")
                    } catch (Exception e) {
                        updateGitlabCommitStatus name: 'bandit', state: 'failed'
                        def errorLog = e.getMessage()
                        sendTelegramMessage("Jenkins: Bandit security check failed - security issues found ‚ùå\nError: ${errorLog}")
                        error "Bandit found security issues with medium or high severity. Pipeline interrupted."
                    }
                }
            }
        }

        stage('Update Version Information') {
            steps {
                script {
                    updateGitlabCommitStatus name: 'version-update', state: 'running'
                    try {
                        sendTelegramMessage("Jenkins: Updating version information... üìù")
                        
                        // Update version.py with the timestamp
                        sh "sed -i \"s/\\\${PLACEHOLDER_VERSION}/${env.TIMESTAMP}/g\" srcs/main/version.py"
                        
                        // Verify version.py was updated correctly
                        sh "cat srcs/main/version.py"
                        
                        // Also update version.info file to keep it in sync
                        sh "echo ${env.TIMESTAMP} > version.info"
                        
                        updateGitlabCommitStatus name: 'version-update', state: 'success'
                        sendTelegramMessage("Jenkins: Version information updated to ${env.TIMESTAMP} successfully ‚úÖ")
                    } catch (Exception e) {
                        updateGitlabCommitStatus name: 'version-update', state: 'failed'
                        def errorLog = e.getMessage()
                        sendTelegramMessage("Jenkins: Failed to update version information ‚ùå\nError: ${errorLog}")
                        error "Version update failed. Pipeline interrupted."
                    }
                }
            }
        }

        stage('Build Executable') {
            steps {
                script {
                    updateGitlabCommitStatus name: 'build', state: 'running'
                    try {
                        sendTelegramMessage("Jenkins: Building executable using PyInstaller... üîß")
                        sh 'python -m pyinstaller --onefile srcs/main/app.py --name flask-app'
                        updateGitlabCommitStatus name: 'build', state: 'success'
                        sendTelegramMessage("Jenkins: Executable built successfully ‚úÖ")
                    } catch (Exception e) {
                        updateGitlabCommitStatus name: 'build', state: 'failed'
                        def errorLog = e.getMessage()
                        sendTelegramMessage("Jenkins: Failed to build executable ‚ùå\nError: ${errorLog}")
                        error "PyInstaller build failed. Pipeline interrupted."
                    }
                }
            }
        }

        stage('Archive Executable') {
            steps {
                script {
                    updateGitlabCommitStatus name: 'archive', state: 'running'
                    try {
                        sendTelegramMessage("Jenkins: Archiving the built executable... üì¶")
                        archiveArtifacts artifacts: 'dist/flask-app', fingerprint: true
                        updateGitlabCommitStatus name: 'archive', state: 'success'
                        sendTelegramMessage("Jenkins: Executable archived successfully ‚úÖ")
                    } catch (Exception e) {
                        updateGitlabCommitStatus name: 'archive', state: 'failed'
                        def errorLog = e.getMessage()
                        sendTelegramMessage("Jenkins: Failed to archive executable ‚ùå\nError: ${errorLog}")
                        error "Archive failed. Pipeline interrupted."
                    }
                }
            }
        }

        stage('Upload to Nexus') {
            steps {
                script {
                    updateGitlabCommitStatus name: 'nexus-upload', state: 'running'
                    try {
                        sendTelegramMessage("Jenkins: Uploading artifacts to Nexus... üöÄ")
                        
                        // Upload with "latest" tag
                        nexusArtifactUploader(
                            nexusVersion: env.NEXUS_VERSION,
                            protocol: env.NEXUS_PROTOCOL,
                            nexusUrl: env.NEXUS_URL,
                            groupId: env.GROUP_ID,
                            version: 'latest',
                            repository: env.NEXUS_REPO,
                            credentialsId: env.NEXUS_CREDENTIALS_ID,
                            artifacts: [
                                [
                                    artifactId: env.ARTIFACT_ID,
                                    type: 'bin',
                                    file: 'dist/flask-app',
                                    classifier: ''
                                ]
                            ]
                        )
                        
                        // Upload with timestamp tag
                        nexusArtifactUploader(
                            nexusVersion: env.NEXUS_VERSION,
                            protocol: env.NEXUS_PROTOCOL,
                            nexusUrl: env.NEXUS_URL,
                            groupId: env.GROUP_ID,
                            version: env.TIMESTAMP,
                            repository: env.NEXUS_REPO,
                            credentialsId: env.NEXUS_CREDENTIALS_ID,
                            artifacts: [
                                [
                                    artifactId: env.ARTIFACT_ID,
                                    type: 'bin',
                                    file: 'dist/flask-app',
                                    classifier: ''
                                ]
                            ]
                        )
                        
                        updateGitlabCommitStatus name: 'nexus-upload', state: 'success'
                        sendTelegramMessage("Jenkins: Successfully uploaded to Nexus ‚úÖ")
                    } catch (Exception e) {
                        updateGitlabCommitStatus name: 'nexus-upload', state: 'failed'
                        def errorLog = e.getMessage()
                        sendTelegramMessage("Jenkins: Failed to upload to Nexus ‚ùå\nError: ${errorLog}")
                        error "Nexus upload failed. Pipeline interrupted."
                    }
                }
            }
        }

        stage('Push Changes & Create Tag') {
            steps {
                script {
                    updateGitlabCommitStatus name: 'git-push', state: 'running'
                    try {
                        sendTelegramMessage("Jenkins: Pushing version updates to repository... üì§")
                        
                        withCredentials([usernamePassword(credentialsId: env.GIT_CREDENTIALS_ID, 
                                                         usernameVariable: 'GIT_USERNAME', 
                                                         passwordVariable: 'GIT_PASSWORD')]) {
                            // Print diagnostic information
                            sh "echo 'Current directory: ' && pwd"
                            sh "ls -la"
                            
                            // Configure Git globally
                            sh "git config --global user.email 'jenkins@example.com'"
                            sh "git config --global user.name 'Jenkins CI'"
                            
                            // Print git status for debugging
                            sh "git status"
                            
                            // Add, commit, and push version-related changes
                            sh "git add version.info srcs/main/version.py"
                            sh "git commit -m 'Update version to ${env.TIMESTAMP} [ci skip]'"
                            
                            // Set the repository URL with credentials
                            def gitRepoUrl = "http://${GIT_USERNAME}:${GIT_PASSWORD}@gitlab/pipeline-project-group/app-flask.git"
                            
                            // Push changes to the current branch (developer branch)
                            sh "git push ${gitRepoUrl} HEAD:developer"
                            
                            // Verify the version files were pushed correctly
                            sendTelegramMessage("Jenkins: Version files successfully pushed to repository")
                            
                            // Create and push tag
                            sh "git tag -a ${env.TIMESTAMP} -m 'Release ${env.TIMESTAMP}'"
                            sh "git push ${gitRepoUrl} ${env.TIMESTAMP}"
                            
                            sendTelegramMessage("Jenkins: Tag ${env.TIMESTAMP} created and pushed")
                        }
                        
                        updateGitlabCommitStatus name: 'git-push', state: 'success'
                        sendTelegramMessage("Jenkins: Changes pushed and tag created successfully ‚úÖ")
                    } catch (Exception e) {
                        updateGitlabCommitStatus name: 'git-push', state: 'failed'
                        def errorLog = e.getMessage()
                        sendTelegramMessage("Jenkins: Failed to push changes or create tag ‚ùå\nError: ${errorLog}")
                        error "Git operations failed. Pipeline interrupted."
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                updateGitlabCommitStatus name: 'pipeline', state: 'success'
                sendTelegramMessage("üéâ Pipeline succeeded for ${env.JOB_NAME} #${env.BUILD_NUMBER}! All stages completed successfully.")
            }
        }
        failure {
            script {
                updateGitlabCommitStatus name: 'pipeline', state: 'failed'
                sendTelegramMessage("‚ùå Pipeline failed for ${env.JOB_NAME} #${env.BUILD_NUMBER}. Check Jenkins for details.")
            }
        }
        always {
            script {
                sendTelegramMessage("üìä Pipeline completed for ${env.JOB_NAME} #${env.BUILD_NUMBER}. Total duration: ${currentBuild.durationString}")
            }
        }
    }
}

def sendTelegramMessage(String message) {
    // URL encode the message
    def encodedMessage = URLEncoder.encode(message, "UTF-8")
    
    withCredentials([
        string(credentialsId: 'telegram-token', variable: 'TOKEN'),
        string(credentialsId: 'telegram-chat-id', variable: 'CHAT_ID')
    ]) {
        sh '''
            curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage \
            -d chat_id=${CHAT_ID} \
            -d text="''' + encodedMessage + '''"
        '''
    }
}